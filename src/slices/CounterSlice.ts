import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

import { RootState } from "../store";

const TMDB_API_KEY = "dc44295f48afc4bcfb2bbfedac9bdc10";
const TMDB_GET_POPULAR_MOVIES = `https://api.themoviedb.org/3/movie/popular?api_key=${TMDB_API_KEY}&language=en-US&page=1`;

export interface CounterState {
  value: number;
  movieListStatus: "idle" | "loading" | "failed";
  movieList: string;
}

export interface PopularMoviesResult {
  title: string;
}

const initialState: CounterState = {
  value: 0,
  movieListStatus: "idle",
  movieList: "",
};

export const fetchPopularMovies = createAsyncThunk(
  "counter/fetchPopularMovies",
  async () => {
    const response = await fetch(TMDB_GET_POPULAR_MOVIES);
    const responseJson = await response.json();
    console.log(responseJson.results);
    const returnValue = responseJson.results
      .map((o: PopularMoviesResult) => o.title)
      .join(", ");

    if (response.ok) {
      return returnValue;
    } else {
      throw Error("Error occurred, status: " + response.status);
    }
  }
);

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state: CounterState) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state: CounterState) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state: CounterState, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPopularMovies.pending, (state) => {
        state.movieListStatus = "loading";
      })
      .addCase(fetchPopularMovies.fulfilled, (state, action) => {
        state.movieListStatus = "idle";
        state.movieList += action.payload;
      })
      .addCase(fetchPopularMovies.rejected, (state) => {
        state.movieListStatus = "failed";
      })
      .addMatcher(
        // matcher can be defined inline as a type predicate function
        (action): action is PayloadAction => action.type.endsWith("/rejected"),
        (state) => {
          state.movieListStatus = "failed";
        }
      );
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

export const selectCount = (state: RootState) => state.counter.value;
export const selectStatus = (state: RootState) => state.counter.movieListStatus;
export const selectMovieList = (state: RootState) => state.counter.movieList;
export const selectMovieListStatus = (state: RootState) =>
  state.counter.movieListStatus;

export default counterSlice.reducer;
